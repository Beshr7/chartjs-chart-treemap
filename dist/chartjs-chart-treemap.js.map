{
  "version": 3,
  "sources": [
    "../../chartjs-chart-treemap/dist/chartjs-chart-treemap.esm.js"
  ],
  "sourcesContent": [
    "/*!\n * chartjs-chart-treemap v2.0.2\n * https://chartjs-chart-treemap.pages.dev/\n * (c) 2021 Jukka Kurkela\n * Released under the MIT license\n */\nimport { Chart, registry, DatasetController, Element } from 'chart.js';\nimport { toFont, valueOrDefault, isArray } from 'chart.js/helpers';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\nfunction flatten(input) {\n  const stack = [...input];\n  const res = [];\n  while (stack.length) {\n    // pop value from stack\n    const next = stack.pop();\n    if (Array.isArray(next)) {\n      // push back array items, won't modify the original input\n      stack.push(...next);\n    } else {\n      res.push(next);\n    }\n  }\n  // reverse to restore input order\n  return res.reverse();\n}\n\n/**\n * @param {[]} values\n * @param {string} grp\n * @param {string} key\n * @param {string} [mainGrp]\n * @param {*} [mainValue]\n */\nfunction group(values, grp, key, mainGrp, mainValue) {\n  const tmp = Object.create(null);\n  const data = Object.create(null);\n  const ret = [];\n  let g, i, n, v;\n  for (i = 0, n = values.length; i < n; ++i) {\n    v = values[i];\n    if (mainGrp && v[mainGrp] !== mainValue) {\n      continue;\n    }\n    g = v[grp] || '';\n    if (!(g in tmp)) {\n      tmp[g] = 0;\n      data[g] = [];\n    }\n    tmp[g] += +v[key];\n    data[g].push(v);\n  }\n\n  Object.keys(tmp).forEach((k) => {\n    v = {children: data[k]};\n    v[key] = +tmp[k];\n    v[grp] = k;\n    if (mainGrp) {\n      v[mainGrp] = mainValue;\n    }\n    ret.push(v);\n  });\n\n  return ret;\n}\n\nfunction isObject(obj) {\n  const type = typeof obj;\n  return type === 'function' || type === 'object' && !!obj;\n}\n\nfunction index(values, key) {\n  let n = values.length;\n  let i;\n\n  if (!n) {\n    return key;\n  }\n\n  const obj = isObject(values[0]);\n  key = obj ? key : 'v';\n\n  for (i = 0, n = values.length; i < n; ++i) {\n    if (obj) {\n      values[i]._idx = i;\n    } else {\n      values[i] = {v: values[i], _idx: i};\n    }\n  }\n  return key;\n}\n\nfunction sort(values, key) {\n  if (key) {\n    values.sort((a, b) => +b[key] - +a[key]);\n  } else {\n    values.sort((a, b) => +b - +a);\n  }\n}\n\nfunction sum(values, key) {\n  let s, i, n;\n\n  for (s = 0, i = 0, n = values.length; i < n; ++i) {\n    s += key ? +values[i][key] : +values[i];\n  }\n\n  return s;\n}\n\nfunction requireVersion(min, ver) {\n  const parts = ver.split('.');\n  if (!min.split('.').reduce((a, c, i) => a && c <= parts[i], true)) {\n    throw new Error(`Chart.js v${ver} is not supported. v${min} or newer is required.`);\n  }\n}\n\nfunction round(v, n) {\n  // @ts-ignore\n  return (+(Math.round(v + 'e+' + n) + 'e-' + n)) || 0;\n}\n\nfunction getDims(itm, w2, s2, key) {\n  const a = itm._normalized;\n  const ar = w2 * a / s2;\n  const d1 = Math.sqrt(a * ar);\n  const d2 = a / d1;\n  const w = key === '_ix' ? d1 : d2;\n  const h = key === '_ix' ? d2 : d1;\n\n  return {d1, d2, w, h};\n}\n\nconst getX = (rect, w) => round(rect.rtl ? rect.x + rect.w - rect._ix - w : rect.x + rect._ix, 4);\n\nfunction buildRow(rect, itm, dims, sum) {\n  const r = {\n    x: getX(rect, dims.w),\n    y: round(rect.y + rect._iy, 4),\n    w: round(dims.w, 4),\n    h: round(dims.h, 4),\n    a: round(itm._normalized, 4),\n    v: itm.value,\n    s: sum,\n    _data: itm._data\n  };\n  if (itm.group) {\n    r.g = itm.group;\n    r.l = itm.level;\n    r.gs = itm.groupSum;\n  }\n  return r;\n}\n\nclass Rect {\n  constructor(r) {\n    const me = this;\n    r = r || {w: 1, h: 1};\n    me.rtl = !!r.rtl;\n    me.x = r.x || r.left || 0;\n    me.y = r.y || r.top || 0;\n    me._ix = 0;\n    me._iy = 0;\n    me.w = r.w || r.width || (r.right - r.left);\n    me.h = r.h || r.height || (r.bottom - r.top);\n  }\n\n  get area() {\n    return this.w * this.h;\n  }\n\n  get iw() {\n    return this.w - this._ix;\n  }\n\n  get ih() {\n    return this.h - this._iy;\n  }\n\n  get dir() {\n    const ih = this.ih;\n    return ih <= this.iw && ih > 0 ? 'y' : 'x';\n  }\n\n  get side() {\n    return this.dir === 'x' ? this.iw : this.ih;\n  }\n\n  map(arr) {\n    const me = this;\n    const ret = [];\n    const sum = arr.nsum;\n    const row = arr.get();\n    const dir = me.dir;\n    const side = me.side;\n    const w2 = side * side;\n    const key = dir === 'x' ? '_ix' : '_iy';\n    const s2 = sum * sum;\n    let maxd2 = 0;\n    let totd1 = 0;\n    for (const itm of row) {\n      const dims = getDims(itm, w2, s2, key);\n      totd1 += dims.d1;\n      maxd2 = Math.max(maxd2, dims.d2);\n      ret.push(buildRow(me, itm, dims, arr.sum));\n      me[key] += dims.d1;\n    }\n    me[dir === 'y' ? '_ix' : '_iy'] += maxd2;\n    me[key] -= totd1;\n    return ret;\n  }\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction getStat(sa) {\n  return {\n    min: sa.min,\n    max: sa.max,\n    sum: sa.sum,\n    nmin: sa.nmin,\n    nmax: sa.nmax,\n    nsum: sa.nsum\n  };\n}\n\nfunction getNewStat(sa, o) {\n  const v = +o[sa.key];\n  const n = v * sa.ratio;\n  o._normalized = n;\n\n  return {\n    min: min(sa.min, v),\n    max: max(sa.max, v),\n    sum: sa.sum + v,\n    nmin: min(sa.nmin, n),\n    nmax: max(sa.nmax, n),\n    nsum: sa.nsum + n\n  };\n}\n\nfunction setStat(sa, stat) {\n  Object.assign(sa, stat);\n}\n\nfunction push(sa, o, stat) {\n  sa._arr.push(o);\n  setStat(sa, stat);\n}\n\nclass StatArray {\n  constructor(key, ratio) {\n    const me = this;\n    me.key = key;\n    me.ratio = ratio;\n    me.reset();\n  }\n\n  get length() {\n    return this._arr.length;\n  }\n\n  reset() {\n    const me = this;\n    me._arr = [];\n    me._hist = [];\n    me.sum = 0;\n    me.nsum = 0;\n    me.min = Infinity;\n    me.max = -Infinity;\n    me.nmin = Infinity;\n    me.nmax = -Infinity;\n  }\n\n  push(o) {\n    push(this, o, getNewStat(this, o));\n  }\n\n  pushIf(o, fn, ...args) {\n    const nstat = getNewStat(this, o);\n    if (!fn(getStat(this), nstat, args)) {\n      return o;\n    }\n    push(this, o, nstat);\n  }\n\n  get() {\n    return this._arr;\n  }\n}\n\nfunction compareAspectRatio(oldStat, newStat, args) {\n  if (oldStat.sum === 0) {\n    return true;\n  }\n\n  const [length] = args;\n  const os2 = oldStat.nsum * oldStat.nsum;\n  const ns2 = newStat.nsum * newStat.nsum;\n  const l2 = length * length;\n  const or = Math.max(l2 * oldStat.nmax / os2, os2 / (l2 * oldStat.nmin));\n  const nr = Math.max(l2 * newStat.nmax / ns2, ns2 / (l2 * newStat.nmin));\n  return nr <= or;\n}\n\n/**\n *\n * @param {number[]|object[]} values\n * @param {object} rectangle\n * @param {string} key\n * @param {*} grp\n * @param {*} lvl\n * @param {*} gsum\n */\nfunction squarify(values, rectangle, key, grp, lvl, gsum) {\n  values = values || [];\n  const rows = [];\n  const rect = new Rect(rectangle);\n  const row = new StatArray('value', rect.area / sum(values, key));\n  let length = rect.side;\n  const n = values.length;\n  let i, o;\n\n  if (!n) {\n    return rows;\n  }\n\n  const tmp = values.slice();\n  key = index(tmp, key);\n  \n\n  const val = (idx) => key ? +tmp[idx][key] : +tmp[idx];\n  const gval = (idx) => grp && tmp[idx][grp];\n\n  for (i = 0; i < n; ++i) {\n    o = {value: val(i), groupSum: gsum, _data: values[tmp[i]._idx], level: undefined, group: undefined};\n    if (grp) {\n      o.level = lvl;\n      o.group = gval(i);\n    }\n    o = row.pushIf(o, compareAspectRatio, length);\n    if (o) {\n      rows.push(rect.map(row));\n      length = rect.side;\n      row.reset();\n      row.push(o);\n    }\n  }\n  if (row.length) {\n    rows.push(rect.map(row));\n  }\n  return flatten(rows);\n}\n\nvar version = \"2.0.2\";\n\nfunction rectNotEqual(r1, r2) {\n  return !r1 || !r2\n\t\t|| r1.x !== r2.x\n\t\t|| r1.y !== r2.y\n\t\t|| r1.w !== r2.w\n\t\t|| r1.h !== r2.h;\n}\n\nfunction arrayNotEqual(a1, a2) {\n  let i, n;\n\n  if (a1.lenght !== a2.length) {\n    return true;\n  }\n\n  for (i = 0, n = a1.length; i < n; ++i) {\n    if (a1[i] !== a2[i]) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction shouldDrawCaption(rect, font) {\n  if (!font) {\n    return false;\n  }\n  const w = rect.width || rect.w;\n  const h = rect.height || rect.h;\n  const min = font.lineHeight * 2;\n  return w > min && h > min;\n}\n\nfunction drawCaption(ctx, rect, item, opts, levels) {\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(rect.x, rect.y, rect.width, rect.height);\n  ctx.clip();\n  if (!('l' in item) || item.l === levels) {\n    drawLabels(ctx, item, rect);\n  } else if (opts.captions && opts.captions.display) {\n    drawCaptionLabel(ctx, item, rect);\n  }\n  ctx.restore();\n}\n\nfunction drawCaptionLabel(ctx, item, rect) {\n  const opts = rect.options;\n  const captionsOpts = opts.captions || {};\n  const borderWidth = opts.borderWidth || 0;\n  const spacing = valueOrDefault(opts.spacing, 0) + borderWidth;\n  const color = (rect.active ? captionsOpts.hoverColor : captionsOpts.color) || captionsOpts.color;\n  const padding = captionsOpts.padding;\n  const align = captionsOpts.align || (opts.rtl ? 'right' : 'left');\n  const optFont = (rect.active ? captionsOpts.hoverFont : captionsOpts.font) || captionsOpts.font;\n  const font = toFont(optFont);\n  const x = calculateX(rect, align, padding, borderWidth);\n  ctx.fillStyle = color;\n  ctx.font = font.string;\n  ctx.textAlign = align;\n  ctx.textBaseline = 'middle';\n  ctx.fillText(captionsOpts.formatter || item.g, x, rect.y + padding + spacing + (font.lineHeight / 2));\n}\n\nfunction drawDivider(ctx, rect) {\n  const opts = rect.options;\n  const dividersOpts = opts.dividers || {};\n  const w = rect.width || rect.w;\n  const h = rect.height || rect.h;\n\n  ctx.save();\n  ctx.strokeStyle = dividersOpts.lineColor || 'black';\n  ctx.lineCap = dividersOpts.lineCapStyle;\n  ctx.setLineDash(dividersOpts.lineDash || []);\n  ctx.lineDashOffset = dividersOpts.lineDashOffset;\n  ctx.lineWidth = dividersOpts.lineWidth;\n  ctx.beginPath();\n  if (w > h) {\n    const w2 = w / 2;\n    ctx.moveTo(rect.x + w2, rect.y);\n    ctx.lineTo(rect.x + w2, rect.y + h);\n  } else {\n    const h2 = h / 2;\n    ctx.moveTo(rect.x, rect.y + h2);\n    ctx.lineTo(rect.x + w, rect.y + h2);\n  }\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction buildData(dataset, mainRect, captions) {\n  const key = dataset.key || '';\n  let tree = dataset.tree || [];\n  const groups = dataset.groups || [];\n  const glen = groups.length;\n  const sp = valueOrDefault(dataset.spacing, 0) + valueOrDefault(dataset.borderWidth, 0);\n  const captionsFont = captions.font || {};\n  const font = toFont(captionsFont);\n  const padding = valueOrDefault(captions.padding, 3);\n\n  function recur(gidx, rect, parent, gs) {\n    const g = groups[gidx];\n    const pg = (gidx > 0) && groups[gidx - 1];\n    const gdata = group(tree, g, key, pg, parent);\n    const gsq = squarify(gdata, rect, key, g, gidx, gs);\n    const ret = gsq.slice();\n    let subRect;\n    if (gidx < glen - 1) {\n      gsq.forEach((sq) => {\n        subRect = {x: sq.x + sp, y: sq.y + sp, w: sq.w - 2 * sp, h: sq.h - 2 * sp};\n        if (valueOrDefault(captions.display, true) && shouldDrawCaption(sq, font)) {\n          subRect.y += font.lineHeight + padding * 2;\n          subRect.h -= font.lineHeight + padding * 2;\n        }\n        ret.push(...recur(gidx + 1, subRect, sq.g, sq.s));\n      });\n    }\n    return ret;\n  }\n\n  if (!tree.length && dataset.data.length) {\n    tree = dataset.tree = dataset.data;\n  }\n\n  return glen\n    ? recur(0, mainRect)\n    : squarify(tree, mainRect, key);\n}\n\nfunction drawLabels(ctx, item, rect) {\n  const opts = rect.options;\n  const labelsOpts = opts.labels;\n  if (!labelsOpts || !labelsOpts.display) {\n    return;\n  }\n  const optColor = (rect.active ? labelsOpts.hoverColor : labelsOpts.color) || labelsOpts.color;\n  const optFont = (rect.active ? labelsOpts.hoverFont : labelsOpts.font) || labelsOpts.font;\n  const font = toFont(optFont);\n  const lh = font.lineHeight;\n  const label = labelsOpts.formatter;\n  if (label) {\n    const labels = isArray(label) ? label : [label];\n    const xyPoint = calculateXYLabel(opts, rect, labels, lh);\n    ctx.font = font.string;\n    ctx.textAlign = labelsOpts.align;\n    ctx.textBaseline = labelsOpts.position;\n    ctx.fillStyle = optColor;\n    labels.forEach((l, i) => ctx.fillText(l, xyPoint.x, xyPoint.y + i * lh));\n  }\n}\n\nfunction calculateXYLabel(options, rect, labels, lineHeight) {\n  const labelsOpts = options.labels;\n  const borderWidth = options.borderWidth || 0;\n  const {align, position, padding} = labelsOpts;\n  let x, y;\n  x = calculateX(rect, align, padding, borderWidth);\n  if (position === 'top') {\n    y = rect.y + padding + borderWidth;\n  } else if (position === 'bottom') {\n    y = rect.y + rect.height - padding - borderWidth - (labels.length - 1) * lineHeight;\n  } else {\n    y = rect.y + rect.height / 2 - labels.length * lineHeight / 4;\n  }\n  return {x, y};\n}\n\nfunction calculateX(rect, align, padding, borderWidth) {\n  if (align === 'left') {\n    return rect.x + padding + borderWidth;\n  } else if (align === 'right') {\n    return rect.x + rect.width - padding - borderWidth;\n  }\n  return rect.x + rect.width / 2;\n}\n\nclass TreemapController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this._rect = undefined;\n    this._key = undefined;\n    this._groups = undefined;\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const me = this;\n    const meta = me.getMeta();\n    const dataset = me.getDataset();\n    const groups = dataset.groups || (dataset.groups = []);\n    const captions = dataset.captions ? dataset.captions : {};\n    const area = me.chart.chartArea;\n    const key = dataset.key || '';\n    const rtl = !!dataset.rtl;\n\n    const mainRect = {x: area.left, y: area.top, w: area.right - area.left, h: area.bottom - area.top, rtl};\n\n    if (mode === 'reset' || rectNotEqual(me._rect, mainRect) || me._key !== key || arrayNotEqual(me._groups, groups)) {\n      me._rect = mainRect;\n      me._groups = groups.slice();\n      me._key = key;\n\n      dataset.data = buildData(dataset, mainRect, captions);\n      // @ts-ignore using private stuff\n      me._dataCheck();\n      // @ts-ignore using private stuff\n      me._resyncElements();\n    }\n\n    me.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  resolveDataElementOptions(index, mode) {\n    const options = super.resolveDataElementOptions(index, mode);\n    const result = Object.isFrozen(options) ? Object.assign({}, options) : options;\n    result.font = toFont(options.captions.font);\n    return result;\n  }\n\n  updateElements(rects, start, count, mode) {\n    const me = this;\n    const reset = mode === 'reset';\n    const dataset = me.getDataset();\n    const firstOpts = me._rect.options = me.resolveDataElementOptions(start, mode);\n    const sharedOptions = me.getSharedOptions(firstOpts);\n    const includeOptions = me.includeOptions(mode, sharedOptions);\n\n    for (let i = start; i < start + count; i++) {\n      const sq = dataset.data[i];\n      const options = sharedOptions || me.resolveDataElementOptions(i, mode);\n      const sp = options.spacing;\n      const sp2 = sp * 2;\n      const properties = {\n        x: sq.x + sp,\n        y: sq.y + sp,\n        width: reset ? 0 : sq.w - sp2,\n        height: reset ? 0 : sq.h - sp2,\n        hidden: sp2 > sq.w || sp2 > sq.h,\n      };\n\n      if (includeOptions) {\n        properties.options = options;\n      }\n      me.updateElement(rects[i], i, properties, mode);\n    }\n\n    me.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  _drawDividers(ctx, data, metadata) {\n    for (let i = 0, ilen = metadata.length; i < ilen; ++i) {\n      const rect = metadata[i];\n      const item = data[i];\n      const dividersOpts = rect.options.dividers || {};\n      if (dividersOpts.display && item._data.children.length > 1) {\n        drawDivider(ctx, rect);\n      }\n    }\n  }\n\n  _drawRects(ctx, data, metadata, levels) {\n    for (let i = 0, ilen = metadata.length; i < ilen; ++i) {\n      const rect = metadata[i];\n      const item = data[i];\n      if (!rect.hidden) {\n        rect.draw(ctx);\n        const opts = rect.options;\n        if (shouldDrawCaption(rect, opts.captions.font)) {\n          drawCaption(ctx, rect, item, opts, levels);\n        }\n      }\n    }\n  }\n\n  draw() {\n    const me = this;\n    const ctx = me.chart.ctx;\n    const metadata = me.getMeta().data || [];\n    const dataset = me.getDataset();\n    const levels = (dataset.groups || []).length - 1;\n    const data = dataset.data || [];\n\n    me._drawRects(ctx, data, metadata, levels);\n    me._drawDividers(ctx, data, metadata);\n  }\n}\n\nTreemapController.id = 'treemap';\n\nTreemapController.version = version;\n\nTreemapController.defaults = {\n  dataElementType: 'treemap',\n\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'width', 'height']\n    },\n  },\n\n  borderWidth: 0,\n  spacing: 0.5,\n  dividers: {\n    display: false,\n    lineWidth: 1,\n  }\n\n};\n\nTreemapController.descriptors = {\n  _scriptable: true,\n  _indexable: false\n};\n\nTreemapController.overrides = {\n  interaction: {\n    mode: 'point',\n    intersect: true\n  },\n\n  hover: {},\n\n  plugins: {\n    tooltip: {\n      position: 'treemap',\n      intersect: true,\n      callbacks: {\n        title(items) {\n          if (items.length) {\n            const item = items[0];\n            return item.dataset.key || '';\n          }\n          return '';\n        },\n        label(item) {\n          const dataset = item.dataset;\n          const dataItem = dataset.data[item.dataIndex];\n          const label = dataItem.g || dataset.label;\n          return (label ? label + ': ' : '') + dataItem.v;\n        }\n      }\n    },\n  },\n  scales: {\n    x: {\n      type: 'linear',\n      display: false\n    },\n    y: {\n      type: 'linear',\n      display: false\n    }\n  },\n};\n\nTreemapController.beforeRegister = function() {\n  requireVersion('3.6', Chart.version);\n};\n\nTreemapController.afterRegister = function() {\n  const tooltipPlugin = registry.plugins.get('tooltip');\n  if (tooltipPlugin) {\n    tooltipPlugin.positioners.treemap = function(active) {\n      if (!active.length) {\n        return false;\n      }\n\n      const item = active[active.length - 1];\n      const el = item.element;\n\n      return el.tooltipPosition();\n    };\n  }\n};\n\nTreemapController.afterUnregister = function() {\n  const tooltipPlugin = registry.plugins.get('tooltip');\n  if (tooltipPlugin) {\n    delete tooltipPlugin.positioners.treemap;\n  }\n};\n\n/**\n * Helper function to get the bounds of the rect\n * @param {TreemapElement} rect the rect\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the rect\n * @private\n */\nfunction getBounds(rect, useFinalPosition) {\n  const {x, y, width, height} = rect.getProps(['x', 'y', 'width', 'height'], useFinalPosition);\n  return {left: x, top: y, right: x + width, bottom: y + height};\n}\n\nfunction limit(value, min, max) {\n  return Math.max(Math.min(value, max), min);\n}\n\nfunction parseBorderWidth(value, maxW, maxH) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = +value.top || 0;\n    r = +value.right || 0;\n    b = +value.bottom || 0;\n    l = +value.left || 0;\n  } else {\n    t = r = b = l = +value || 0;\n  }\n\n  return {\n    t: limit(t, 0, maxH),\n    r: limit(r, 0, maxW),\n    b: limit(b, 0, maxH),\n    l: limit(l, 0, maxW)\n  };\n}\n\nfunction boundingRects(rect) {\n  const bounds = getBounds(rect);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(rect.options.borderWidth, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b\n    }\n  };\n}\n\nfunction inRange(rect, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const bounds = !rect || (skipX && skipY) ? false : getBounds(rect, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || x >= bounds.left && x <= bounds.right)\n\t\t&& (skipY || y >= bounds.top && y <= bounds.bottom);\n}\n\nclass TreemapElement extends Element {\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.width = undefined;\n    this.height = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const options = this.options;\n    const {inner, outer} = boundingRects(this);\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      ctx.rect(outer.x, outer.y, outer.w, outer.h);\n      ctx.clip();\n      ctx.rect(inner.x, inner.y, inner.w, inner.h);\n      ctx.fillStyle = options.backgroundColor;\n      ctx.fill();\n      ctx.fillStyle = options.borderColor;\n      ctx.fill('evenodd');\n    } else {\n      ctx.fillStyle = options.backgroundColor;\n      ctx.fillRect(inner.x, inner.y, inner.w, inner.h);\n    }\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, width, height} = this.getProps(['x', 'y', 'width', 'height'], useFinalPosition);\n    return {\n      x: x + width / 2,\n      y: y + height / 2\n    };\n  }\n\n  tooltipPosition() {\n    return this.getCenterPoint();\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n\nTreemapElement.id = 'treemap';\n\nTreemapElement.defaults = {\n  borderWidth: undefined,\n  spacing: undefined,\n  label: undefined,\n  rtl: undefined,\n  dividers: {\n    display: false,\n    lineCapStyle: 'butt',\n    lineColor: 'black',\n    lineDash: undefined,\n    lineDashOffset: 0,\n    lineWidth: 0,\n  },\n  captions: {\n    align: undefined,\n    color: undefined,\n    display: true,\n    formatter: (ctx) => ctx.raw.g || '',\n    font: {},\n    padding: 3\n  },\n  labels: {\n    align: 'center',\n    color: undefined,\n    display: false,\n    formatter: (ctx) => ctx.raw.g ? [ctx.raw.g, ctx.raw.v] : ctx.raw.v,\n    font: {},\n    position: 'middle',\n    padding: 3\n  }\n};\n\nTreemapElement.descriptors = {\n  _scriptable: true,\n  _indexable: false\n};\n\nTreemapElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\n\nexport { TreemapController, TreemapElement };\n"
  ],
  "mappings": "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",
  "names": []
}
